const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// VariÃ¡veis de ambiente
const TOKEN = process.env.WHATSAPP_TOKEN; // Token da API do WhatsApp
const VERIFY_TOKEN = process.env.VERIFY_TOKEN; // Token de verificaÃ§Ã£o do webhook
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID; // ID do nÃºmero de telefone

// Endpoint para receber mensagens do WhatsApp
app.post('/webhook', async (req, res) => {
    const body = req.body;

    if (body.object === 'whatsapp_business_account') {
        const message = body.entry[0].changes[0].value.messages[0];
        const sender = message.from;
        const text = message.text.body.toLowerCase();

        // LÃ³gica do chatbot
        let responseText = "Desculpe, nÃ£o entendi. Como posso ajudar?";
        if (text.includes("agendar consulta online")) {
            responseText = `Que Ã³timo que vocÃª escolheu nossa consulta online! ðŸ˜Š\n\n` +
                           `Aqui estÃ£o os detalhes:\n` +
                           `- Valor: R$500,00 (com a consulta de retorno inclusa em atÃ© 30 dias).\n` +
                           `- HorÃ¡rios de atendimento:\n` +
                           `  - Segunda a Quinta: das 09h Ã s 20h\n` +
                           `  - Sexta-feira: das 09h Ã s 18h\n` +
                           `  - SÃ¡bados: das 09h Ã s 12h\n\n` +
                           `No dia da consulta, enviaremos um link para vocÃª acessar a plataforma de telemedicina. Ã‰ simples e prÃ¡tico!\n\n` +
                           `Gostaria de confirmar o agendamento ou tirar mais dÃºvidas?`;
        }

        // Enviar resposta ao usuÃ¡rio
        await sendMessage(sender, responseText);
    }

    res.sendStatus(200);
});

// FunÃ§Ã£o para enviar mensagem via API do WhatsApp
async function sendMessage(recipient, message) {
    await axios.post(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
        messaging_product: 'whatsapp',
        to: recipient,
        text: { body: message }
    }, {
        headers: {
            Authorization: `Bearer ${TOKEN}`
        }
    });
}

// Endpoint para verificar o webhook
app.get('/webhook', (req, res) => {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];

    if (mode && token === VERIFY_TOKEN) {
        res.send(challenge);
    } else {
        res.sendStatus(403);
    }
});

// Iniciar servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});
